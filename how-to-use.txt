Starting Upload Scripts

    -please see howtorun.txt in /Upload/ for how to execute file upload to cloud services.

On Site Processing Scripts
    These are fully responsible for the management of files, metadata, backup, security indicator writing etc.
    It is broken down into one scripts:
        - index.js - responsible for watching the raw folder, upon file save to raw folder it appends meta-data to the file and then moves file to the processed cache
    
    Supplementary scripts are as follows:
        - resetStore.js - **DO NOT RUN AS SUDO** this cleans out the local store and resets to default state - run with: node resetStore.js
        - resetCache.js - **DO NOT RUN AS SUDO** this cleans out the processed cache and resets to default state - run with: node resetCache.js

    All scripts are controlled by PM2, to initiate scripts please run ...

Vision Scripts

    All scripts are controlled via PM2 see http://pm2.keymetrics.io/
    To start scripts: ./initSnapshots for the 9 snapshot recorders, and ./initStreamsPM2 for the streaming camera

Machine Vision Scripts
    This is for the generation and creation of required files needed for yolo.
    See the instructions of data-preparation-instructions.txt for how to fetch images and prepare files and see yolo-instructions.txt on how to use this data to train a yolo darknet model

Security Indicators and Checking Authenticity
    Security Indicators are generated in the following manner: The PNG pixel data is read in as a Buffer, then converted into a UTF8 formatted string which is then fed into a SHA256 hashing algorithm.
    There are two scripts in Processing/utils/ that are responsible for reading out meta data from the pngs and for checking authenticity.
        - extractPngMeta.js is used to print out the meta data on the image, this is run by: node extractPngMeta.js <relative path to file>
        - checkIfPngOriginal.js is used to print out the meta data and to confirm that the image security indicator stored in the image meta data matches the generated security indicator that is made from the current images pixel distribution, this is run by: node checkIfPngOriginal.js <relative path to file>