This script checks the cloud portal for all positive images, checks against the path specified that contains the images, for any images that don't exist downloads them and saves to this location, generates relevant text files for yolo.

How to run: 

    sudo gcloudkeypath=<path to cloud key> node generateBoundingFiles.js <required args> <optional args> 
    eg. sudo gcloudkeypath=/keys/gcloudkey.json node generateBoundingFiles.js <required args> <optional args> 

Required Arguments:
    --darknet-location=<absolute location to darknet install>
            eg. --darknet-location=/darknet/build/x64/
            This should be the absolute path to the darknet build something like d/darknet/build/x64/
    --image-relative-path=<relative path to images from darknet home>
        eg. --image-path=data/onetask
        This should be the path to the yolo data location usually something like data/onetask/

Additional Arguments:

--clear-all-text 
    This will delete all text files when run, useful if process got terminated mid way.

--vehicle-type=[non-truck, truck]
    This will only use images of a specific vehicle type. ie non-truck or truck
    eg. --vehicle-type=truck

--sighting-class=[up-to-ear, in-lap, in-hand, speaker-phone]
    This will only use images of a specific sighting class. ie non-truck or truck
    eg. --sighting-class=up-to-ear

--multi-class
    Note that yolo will be single class by default.
    Multiclass will train yolo against each of the sighting classes individually.

--single-class
    Note that yolo will be single class by default. More of a vanity argument.
    Singleclass will train yolo against each of the sighting classes together so only 1 class.

--test-percentage
    Size of test set generated by scripts, defaults to 30.
    eg --test-percentage=50